#!/usr/bin/env python
# Copyright (c) 2012, Etienne Millon
#
# "THE BEER-WARE LICENSE" (Revision 42):
# <me@emillon.org> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.

import atexit
import curses
import os.path
import signal
import subprocess
import sys
import json

class SPlay:

    def __init__(self, data, stdscr):
        self._data = data
        self._stdscr = stdscr
        self._active = {}
        atexit.register(self.mute)
        def handler(signum, frame):
            self.handle_sigchld()
        signal.signal(signal.SIGCHLD, handler)

    def handle_sigchld(self):
        r = []
        for k, v in self._active.iteritems():
            v.poll()
            if v.returncode is not None:
                r.append(k)
        for k in r:
            del self._active[k]

    def mute(self):
        for k, v in self._active.iteritems():
            v.kill()
        self._active = {}

    def play(self, filename):
        p = subprocess.Popen(['/usr/bin/mplayer', '-really-quiet', filename])
        return p

    def display_bindings(self):
        self._stdscr.erase()
        for k, v in self._data.iteritems():
            if k in self._active:
                attr = curses.A_REVERSE
            else:
                attr = curses.A_NORMAL
            self._stdscr.addstr(k, attr)
            self._stdscr.addstr(" - %s\n" % (os.path.basename(v)))
        self._stdscr.addstr("\nq - quit\nm - mute all\n")
        self._stdscr.refresh()

    def run(self):
        while 1:
            self.display_bindings()
            c = self._stdscr.getch()
            if c == ord('q'): break
            if c == ord('m'):
                self.mute()
                continue
            try:
                k = chr(c)
                f = self._data[chr(c)]
            except KeyError:
                stdscr.addstr("Key '%c' is not bound\n" % c)
                stdscr.refresh()
                continue
            except ValueError:
                # Ignore non-ascii key
                continue
            if k not in self._active:
                proc = self.play(f)
                self._active[k] = proc

def main():
    with open(sys.argv[1]) as f:
        data = json.load(f)
    def run(stdscr):
        app = SPlay(data, stdscr)
        app.run()
    curses.wrapper(run)

if __name__ == '__main__':
    main()

# vim: sw=4 sts=4
